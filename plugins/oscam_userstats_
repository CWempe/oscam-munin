#!/usr/bin/perl -w
# -*- mode: cperl; mode: autopair -*-
# Magic markers:
#%# family=auto
#%# capabilities=autoconf suggest
# oscam_userstats_ - Wildcard-Plugin to determine the current userstats rate for OSCam.

# Copyright (C) 2013 MoonMaker <moonmaker@gmx.de>

# Author: MoonMaker <moonmaker@gmx.de>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# .
# This package is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# .
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
# .
# On Debian systems, the complete text of the GNU General
# Public License version 3 can be found in "/usr/share/common-licenses/GPL-3".

=head1 NAME

oscam_userstats_ - Wildcard-plugin to monitor OSCam userstats.
=encoding utf8

=head1 APPLICABLE SYSTEMS

Any oscam host

=head1 CONFIGURATION

To monitor a user link oscam_userstats_<service> to this file. E.g.

  ln -s /usr/share/munin/plugins/oscam_userstats_ /etc/munin/plugins/oscam_userstats_ufs910

This shows the default configuration of this plugin. You can override
the status URL and User Agent.

  [oscam_*]
  env.host http://localhost:8888
  env.ua oscam-status-verifier/0.1
  env.username root
  env.password oscam

  [oscam_userstats_*]
  env.userstats_url oscamapi.html?part=userstats
  group user

  [oscam_totalstats]
  env.totalstats_url oscamapi.html?part=userstats

  [oscam_uptime]
  env.uptime_url oscamapi.html?part=status

=head1 MAGIC MARKERS

  #%# family=auto
  #%# capabilities=autoconf suggest

=head1 VERSION

1.1

=head1 BUGS

None known

=head1 AUTHOR

MoonMaker <moonmaker@gmx.de>

=head1 REPOSITORY

Source code at https://code.launchpad.net/~oscam/+junk/oscam-munin

=head1 LICENSE

GPLv3 (http://www.gnu.org/licenses/gpl.txt)

=cut

use Munin::Plugin;


my $ret = undef;

if (! eval "require LWP::UserAgent;") {
  $ret = "LWP::UserAgent not found";
}

if (! eval "require XML::LibXML;") {
  $ret = "XML::LibXML not found";
}


#chomp(my $fqdn=`hostname -f`);
my $fqdn = 'mediaserver.local';

## Environment defined variables.
## The default URL is oscamapi.html?part=userstats if different set it in the environment.
my $HOST = exists $ENV{'host'} ? $ENV{'host'} : "http://$fqdn:8888";
my $USERSTATS_URL = exists $ENV{'userstats_url'} ? $ENV{'userstats_url'} : "oscamapi.html?part=userstats";
my $URL = "$HOST/$USERSTATS_URL";

## The default user agent is oscam-status-verifier/0.1 if different
## set it in the environment.
my $UA = exists $ENV{'ua'} ? $ENV{'ua'} : 'oscam-munin-verifier/0.1';

# Oscam Username and Password
my $USERNAME = exists $ENV{'username'} ? $ENV{'username'} : 'root';
my $PASSWORD = exists $ENV{'password'} ? $ENV{'password'} : 'oscam';

# Extract XML and show results
sub get_xml
{
  my ( $CONTENT, $MODE ) = @_;

  # Suggest Mode: Get Filename User/Client
  my $name = "";
  if ($0 =~ /oscam_userstats_(.+)*$/) 
  {
	$name = $1;
  }

  # apt-get install libxml-libxml-perl
  # Or with cpan -> install XML::LibXML
  use XML::LibXML;
  my $parser = XML::LibXML->new();
  my $doc = $parser->load_xml(string=>$CONTENT);

  for my $user ($doc->findnodes('/oscam/users/user')) 
  {
	# Get User Information
	if ($MODE eq 'suggest')
	{
		print $user->getAttribute('name'), "\n";
#		printf $user->findvalue('./@status');
#		printf $user->findvalue('./@ip');
#		printf $user->findvalue('./@protocol');

	# Get Values
	} elsif ( ( $name ne "" ) and ( $user->findvalue('./@name') eq $name ) ) {

		my @clients = $user->findnodes('/oscam/users/user[@name="'. $name .'"]/stats/*');

		# User Statistics
		foreach my $child (@clients)
		{
			if ( $child->nodeType() == XML_ELEMENT_NODE ) 
			{
				print $child->nodeName(), ".value ", $child->textContent(), "\n";
			}
		}
	}
  }

}

# Connect to Oscam
sub connect_oscam
{
  my ( $URL, $USERNAME, $PASSWORD, $UA, $MODE ) = @_;

  my $ua = LWP::UserAgent->new(	env_proxy => 0,	keep_alive => 0, timeout => 30 );

  # Set the UA to something different from the libwww-perl.
  # That UA is blocked.
  $ua->agent($UA);
  my $request = HTTP::Request->new('GET',$URL);

  # authenticate
  $request->authorization_basic($USERNAME, $PASSWORD);

  # Get request
  my $response = $ua->request($request);

  # get content of response
  my $content = $response->content();

  # Connection failed
  unless ($response->is_success and $content =~ /^<\?xml/im)
  {
	# Could not connect successfully and autoconf is set
	if ($MODE eq 'autoconf') {
		print "no (no OSCam userstats on $URL)\n";
		exit 1;

	# Could not connect successfully and e.g. config is set
	} else {

		# User Statistics
		print "cwok.value U\n";
		print "cwnok.value U\n";
		print "cwignore.value U\n";
		print "cwtimeout.value U\n";
		print "cwcache.value U\n";
		print "cwtun.value U\n";
		print "cwlastresptime.value U\n";
		print "emmok.value U\n";
		print "emmnok.value U\n";
		print "cwrate.value U\n";
		print "timeonchannel.value U\n";
		print "expectsleep.value U\n";

		exit 0;
	}

  # Connection was successfull
  } else {

	# Suggest Mode
	if ($MODE eq 'suggest') 
	{
		get_xml( $content, $MODE );
		exit 0;
	}

	return $content;
  }
}


# AutoConf
if ($ARGV[0] and $ARGV[0] =~ /^\s*autoconf\s*$/i) {

  if ($ret) {
    print "no ($ret)\n";
    exit 1;
  }

  # Connect to OSCam
  my $content = connect_oscam( $URL, $USERNAME, $PASSWORD, $UA, 'autoconf' );

  # Connection was successfully
  print "yes\n";
  exit 1;

}

# Suggest
if ($ARGV[0] and $ARGV[0] =~ /^\s*suggest\s*$/i) {

  # Connect to OSCam
  my $content = connect_oscam( $URL, $USERNAME, $PASSWORD, $UA, 'suggest' );

  exit 0;
}

## Munin config method.
if (exists $ARGV[0] and $ARGV[0] =~ /^\s*config\s*$/i) {
  print "graph_title OSCam userstats\n";
  print "graph_args --base 1000 -r --logarithmic\n";
  print "graph_category oscam\n";
  print "graph_vlabel %\n";
  print "graph_scale no\n";
  print "graph_info Stats for every client\n";
  print "graph_period second\n";

  print "cwok.draw LINE2\n";
  print "cwok.label cwok\n";
  print "cwok.min 0\n";
  print "cwok.type DERIVE\n";
  print "cwok.info Control Words (CWs) found\n";

  print "cwnok.draw LINE2\n";
  print "cwnok.label cwnok\n";
  print "cwnok.min 0\n";
  print "cwnok.type DERIVE\n";
  print "cwnok.info Control Words (CWs) not found\n";

  print "cwignore.draw LINE2\n";
  print "cwignore.label cwignore\n";
  print "cwignore.min 0\n";
  print "cwignore.type DERIVE\n";
  print "cwignore.info Control Words (CWs) ignored\n";

  print "cwtimeout.draw LINE2\n";
  print "cwtimeout.label cwtimeout\n";
  print "cwtimeout.min 0\n";
  print "cwtimeout.type DERIVE\n";
  print "cwtimeout.info Control Words (CWs) timeout\n";

  print "cwcache.draw LINE2\n";
  print "cwcache.label cwcache\n";
  print "cwcache.min 0\n";
  print "cwcache.type DERIVE\n";
  print "cwcache.info Control Words (CWs) from cache\n";

  print "cwtun.draw LINE2\n";
  print "cwtun.label cwtun\n";
  print "cwtun.min 0\n";
  print "cwtun.type DERIVE\n";
  print "cwtun.info Control Words (CWs) tunneled\n";

  print "cwlastresptime.draw LINE2\n";
  print "cwlastresptime.label cwlastresptime\n";
  print "cwlastresptime.min 0\n";
  print "cwlastresptime.type DERIVE\n";
  print "cwlastresptime.info Control Words (CWs) last response time\n";

  print "emmok.draw LINE2\n";
  print "emmok.label emmok\n";
  print "emmok.min 0\n";
  print "emmok.type DERIVE\n";
  print "emmok.info Entitlement Management Message (EMM) found\n";

  print "emmnok.draw LINE2\n";
  print "emmnok.label emmnok\n";
  print "emmnok.min 0\n";
  print "emmnok.type DERIVE\n";
  print "emmnok.info Entitlement Management Message (EMM) not found\n";

  print "cwrate.draw LINE2\n";
  print "cwrate.label cwrate\n";
  print "cwrate.min 0\n";
  print "cwrate.type DERIVE\n";
  print "cwrate.info Control Words (CWs) rate\n";

  print "timeonchannel.draw LINE2\n";
  print "timeonchannel.label timeonchannel\n";
  print "timeonchannel.min 0\n";
  print "timeonchannel.type DERIVE\n";
  print "timeonchannel.info Time on channel\n";

  print "expectsleep.draw LINE2\n";
  print "expectsleep.label expectsleep\n";
  print "expectsleep.min 0\n";
  print "expectsleep.type DERIVE\n";
  print "expectsleep.info Expects sleep\n";

  exit 0;
}

# Connect to OSCam
my $content = connect_oscam( $URL, $USERNAME, $PASSWORD, $UA, 'standard' );
get_xml( $content, 'standard' );

